const {
  tapParser,
  takeLeft,
  sepBy,
  whitespace,
  letters,
  optionalWhitespace,
  coroutine,
  either,
  fail,
  Parser,
  sequenceOf,
  lookAhead,
  digits
} = require('./');

const sepByPermissive = sepParser => valParser => coroutine(function* () {
  const results = [];

  const lookAheadSepThenValue = lookAhead(sequenceOf([
    sepParser,
    valParser
  ]));

  while (true) {
    const valueEither = yield either(valParser);
    if (valueEither.isError) {
      return results;
    }
    results.push(valueEither.value);

    const lookAheadSepValue = yield either(lookAheadSepThenValue);
    if (lookAheadSepValue.isError) {
      // Either no separator, or a separator not followed by a value
      // Return the results without consuming a separator
      return results;
    }

    // If there was a separator, try to consume it
    const sepEither = yield either(sepParser);
    if (sepEither.isError) {
      return results;
    }
  }
});

const whitespaceSeparatedLetters = sepByPermissive(whitespace)(letters);
const parser = sequenceOf([
  whitespaceSeparatedLetters,
  optionalWhitespace,
  digits
])

const res = parser.run('x y z 12345');

debugger;